// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'src/features/health/data/models/energy_intake_measurement_dto.dart';
import 'src/features/health/data/models/weight_measurement_dto.dart';
import 'src/features/meals/data/models/food_dto.dart';
import 'src/features/meals/data/models/meal_dto.dart';
import 'src/features/meals/data/models/meal_food_dto.dart';
import 'src/features/meals/data/models/token_dto.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 8224126874505312995),
      name: 'EnergyIntakeMeasurementDto',
      lastPropertyId: const obx_int.IdUid(3, 4253440585463482230),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5246181984987407870),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1024930343798033838),
            name: 'kilojoules',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4253440585463482230),
            name: 'time',
            type: 10,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 8606834510209458067),
      name: 'WeightMeasurementDto',
      lastPropertyId: const obx_int.IdUid(3, 5416783889012647133),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5661919711975539452),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1741771769136447575),
            name: 'kilograms',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5416783889012647133),
            name: 'time',
            type: 10,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(5, 85335504140270996),
      name: 'FoodDto',
      lastPropertyId: const obx_int.IdUid(13, 3631517865623350374),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3298661564981860235),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4309344742687750294),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 8204999655354497367),
            name: 'isCustom',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 8617427106112997553),
            name: 'createdAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 1513817894262437979),
            name: 'updatedAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 4762585705289965042),
            name: 'proteinPerUnit',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 1056744640792942680),
            name: 'category',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 3631517865623350374),
            name: 'kilojoulesPer100g',
            type: 8,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(2, 5691717756668899230),
            name: 'tokens',
            targetId: const obx_int.IdUid(7, 2561818947711512952))
      ],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'mealsFoods', srcEntity: 'MealFoodDto', srcField: 'food')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(6, 1853866419130782432),
      name: 'MealDto',
      lastPropertyId: const obx_int.IdUid(5, 9152627012042832030),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6182809114061310298),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5213079710916563334),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 2406834141976730954),
            name: 'createdAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 9152627012042832030),
            name: 'updatedAt',
            type: 10,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'mealsFoods', srcEntity: 'MealFoodDto', srcField: 'meal')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(7, 2561818947711512952),
      name: 'TokenDto',
      lastPropertyId: const obx_int.IdUid(2, 374475286833708285),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8065299793314490541),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 374475286833708285),
            name: 'text',
            type: 9,
            flags: 2048,
            indexId: const obx_int.IdUid(1, 8004466284732580000))
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(8, 4969590096522236903),
      name: 'MealFoodDto',
      lastPropertyId: const obx_int.IdUid(4, 1355343470238945470),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7346246530030763506),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4267331163103769367),
            name: 'mealId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(2, 8097502413275349773),
            relationTarget: 'MealDto'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 8330099300589086214),
            name: 'foodId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(3, 2636566618973489992),
            relationTarget: 'FoodDto'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 1355343470238945470),
            name: 'quantity',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(8, 4969590096522236903),
      lastIndexId: const obx_int.IdUid(3, 2636566618973489992),
      lastRelationId: const obx_int.IdUid(2, 5691717756668899230),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [2088190156517773895, 4475029639873160576],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        5905168449152256273,
        1677682051619733150,
        8975347538675101929,
        2592802322490414320,
        7108020444210493539,
        4103772333176250963,
        366905812608668367,
        1602452085467312779,
        2625934051187557699,
        8875979415062534847,
        8824245873327734273,
        448520072291422795
      ],
      retiredRelationUids: const [2805857721606206038],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    EnergyIntakeMeasurementDto:
        obx_int.EntityDefinition<EnergyIntakeMeasurementDto>(
            model: _entities[0],
            toOneRelations: (EnergyIntakeMeasurementDto object) => [],
            toManyRelations: (EnergyIntakeMeasurementDto object) => {},
            getId: (EnergyIntakeMeasurementDto object) => object.id,
            setId: (EnergyIntakeMeasurementDto object, int id) {
              object.id = id;
            },
            objectToFB: (EnergyIntakeMeasurementDto object, fb.Builder fbb) {
              fbb.startTable(4);
              fbb.addInt64(0, object.id);
              fbb.addFloat64(1, object.kilojoules);
              fbb.addInt64(2, object.time.millisecondsSinceEpoch);
              fbb.finish(fbb.endTable());
              return object.id;
            },
            objectFromFB: (obx.Store store, ByteData fbData) {
              final buffer = fb.BufferContext(fbData);
              final rootOffset = buffer.derefObject(0);
              final idParam =
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
              final kilojoulesParam =
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 6, 0);
              final timeParam = DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
              final object = EnergyIntakeMeasurementDto(
                  id: idParam, kilojoules: kilojoulesParam, time: timeParam);

              return object;
            }),
    WeightMeasurementDto: obx_int.EntityDefinition<WeightMeasurementDto>(
        model: _entities[1],
        toOneRelations: (WeightMeasurementDto object) => [],
        toManyRelations: (WeightMeasurementDto object) => {},
        getId: (WeightMeasurementDto object) => object.id,
        setId: (WeightMeasurementDto object, int id) {
          object.id = id;
        },
        objectToFB: (WeightMeasurementDto object, fb.Builder fbb) {
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addFloat64(1, object.kilograms);
          fbb.addInt64(2, object.time.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final kilogramsParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final timeParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final object = WeightMeasurementDto(
              id: idParam, kilograms: kilogramsParam, time: timeParam);

          return object;
        }),
    FoodDto: obx_int.EntityDefinition<FoodDto>(
        model: _entities[2],
        toOneRelations: (FoodDto object) => [],
        toManyRelations: (FoodDto object) => {
              obx_int.RelInfo<FoodDto>.toMany(2, object.id): object.tokens,
              obx_int.RelInfo<MealFoodDto>.toOneBacklink(
                      3, object.id, (MealFoodDto srcObject) => srcObject.food):
                  object.mealsFoods
            },
        getId: (FoodDto object) => object.id,
        setId: (FoodDto object, int id) {
          object.id = id;
        },
        objectToFB: (FoodDto object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final categoryOffset = fbb.writeString(object.category);
          fbb.startTable(14);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addBool(5, object.isCustom);
          fbb.addInt64(6, object.createdAt.millisecondsSinceEpoch);
          fbb.addInt64(7, object.updatedAt.millisecondsSinceEpoch);
          fbb.addFloat64(9, object.proteinPerUnit);
          fbb.addOffset(10, categoryOffset);
          fbb.addFloat64(12, object.kilojoulesPer100g);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final categoryParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 24, '');
          final kilojoulesPer100gParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 28, 0);
          final proteinPerUnitParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 22);
          final isCustomParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 14, false);
          final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0));
          final updatedAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0));
          final object = FoodDto(
              id: idParam,
              name: nameParam,
              category: categoryParam,
              kilojoulesPer100g: kilojoulesPer100gParam,
              proteinPerUnit: proteinPerUnitParam,
              isCustom: isCustomParam,
              createdAt: createdAtParam,
              updatedAt: updatedAtParam);
          obx_int.InternalToManyAccess.setRelInfo<FoodDto>(object.tokens, store,
              obx_int.RelInfo<FoodDto>.toMany(2, object.id));
          obx_int.InternalToManyAccess.setRelInfo<FoodDto>(
              object.mealsFoods,
              store,
              obx_int.RelInfo<MealFoodDto>.toOneBacklink(
                  3, object.id, (MealFoodDto srcObject) => srcObject.food));
          return object;
        }),
    MealDto: obx_int.EntityDefinition<MealDto>(
        model: _entities[3],
        toOneRelations: (MealDto object) => [],
        toManyRelations: (MealDto object) => {
              obx_int.RelInfo<MealFoodDto>.toOneBacklink(
                      2, object.id, (MealFoodDto srcObject) => srcObject.meal):
                  object.mealsFoods
            },
        getId: (MealDto object) => object.id,
        setId: (MealDto object, int id) {
          object.id = id;
        },
        objectToFB: (MealDto object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addInt64(3, object.createdAt.millisecondsSinceEpoch);
          fbb.addInt64(4, object.updatedAt.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0));
          final updatedAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0));
          final object = MealDto(
              id: idParam,
              name: nameParam,
              createdAt: createdAtParam,
              updatedAt: updatedAtParam);
          obx_int.InternalToManyAccess.setRelInfo<MealDto>(
              object.mealsFoods,
              store,
              obx_int.RelInfo<MealFoodDto>.toOneBacklink(
                  2, object.id, (MealFoodDto srcObject) => srcObject.meal));
          return object;
        }),
    TokenDto: obx_int.EntityDefinition<TokenDto>(
        model: _entities[4],
        toOneRelations: (TokenDto object) => [],
        toManyRelations: (TokenDto object) => {},
        getId: (TokenDto object) => object.id,
        setId: (TokenDto object, int id) {
          object.id = id;
        },
        objectToFB: (TokenDto object, fb.Builder fbb) {
          final textOffset = fbb.writeString(object.text);
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, textOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final textParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final object = TokenDto(id: idParam, text: textParam);

          return object;
        }),
    MealFoodDto: obx_int.EntityDefinition<MealFoodDto>(
        model: _entities[5],
        toOneRelations: (MealFoodDto object) => [object.meal, object.food],
        toManyRelations: (MealFoodDto object) => {},
        getId: (MealFoodDto object) => object.id,
        setId: (MealFoodDto object, int id) {
          object.id = id;
        },
        objectToFB: (MealFoodDto object, fb.Builder fbb) {
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.meal.targetId);
          fbb.addInt64(2, object.food.targetId);
          fbb.addInt64(3, object.quantity);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final quantityParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final object = MealFoodDto(id: idParam, quantity: quantityParam);
          object.meal.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          object.meal.attach(store);
          object.food.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          object.food.attach(store);
          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [EnergyIntakeMeasurementDto] entity fields to define ObjectBox queries.
class EnergyIntakeMeasurementDto_ {
  /// See [EnergyIntakeMeasurementDto.id].
  static final id = obx.QueryIntegerProperty<EnergyIntakeMeasurementDto>(
      _entities[0].properties[0]);

  /// See [EnergyIntakeMeasurementDto.kilojoules].
  static final kilojoules = obx.QueryDoubleProperty<EnergyIntakeMeasurementDto>(
      _entities[0].properties[1]);

  /// See [EnergyIntakeMeasurementDto.time].
  static final time = obx.QueryDateProperty<EnergyIntakeMeasurementDto>(
      _entities[0].properties[2]);
}

/// [WeightMeasurementDto] entity fields to define ObjectBox queries.
class WeightMeasurementDto_ {
  /// See [WeightMeasurementDto.id].
  static final id = obx.QueryIntegerProperty<WeightMeasurementDto>(
      _entities[1].properties[0]);

  /// See [WeightMeasurementDto.kilograms].
  static final kilograms =
      obx.QueryDoubleProperty<WeightMeasurementDto>(_entities[1].properties[1]);

  /// See [WeightMeasurementDto.time].
  static final time =
      obx.QueryDateProperty<WeightMeasurementDto>(_entities[1].properties[2]);
}

/// [FoodDto] entity fields to define ObjectBox queries.
class FoodDto_ {
  /// See [FoodDto.id].
  static final id =
      obx.QueryIntegerProperty<FoodDto>(_entities[2].properties[0]);

  /// See [FoodDto.name].
  static final name =
      obx.QueryStringProperty<FoodDto>(_entities[2].properties[1]);

  /// See [FoodDto.isCustom].
  static final isCustom =
      obx.QueryBooleanProperty<FoodDto>(_entities[2].properties[2]);

  /// See [FoodDto.createdAt].
  static final createdAt =
      obx.QueryDateProperty<FoodDto>(_entities[2].properties[3]);

  /// See [FoodDto.updatedAt].
  static final updatedAt =
      obx.QueryDateProperty<FoodDto>(_entities[2].properties[4]);

  /// See [FoodDto.proteinPerUnit].
  static final proteinPerUnit =
      obx.QueryDoubleProperty<FoodDto>(_entities[2].properties[5]);

  /// See [FoodDto.category].
  static final category =
      obx.QueryStringProperty<FoodDto>(_entities[2].properties[6]);

  /// See [FoodDto.kilojoulesPer100g].
  static final kilojoulesPer100g =
      obx.QueryDoubleProperty<FoodDto>(_entities[2].properties[7]);

  /// see [FoodDto.tokens]
  static final tokens =
      obx.QueryRelationToMany<FoodDto, TokenDto>(_entities[2].relations[0]);

  /// see [FoodDto.mealsFoods]
  static final mealsFoods =
      obx.QueryBacklinkToMany<MealFoodDto, FoodDto>(MealFoodDto_.food);
}

/// [MealDto] entity fields to define ObjectBox queries.
class MealDto_ {
  /// See [MealDto.id].
  static final id =
      obx.QueryIntegerProperty<MealDto>(_entities[3].properties[0]);

  /// See [MealDto.name].
  static final name =
      obx.QueryStringProperty<MealDto>(_entities[3].properties[1]);

  /// See [MealDto.createdAt].
  static final createdAt =
      obx.QueryDateProperty<MealDto>(_entities[3].properties[2]);

  /// See [MealDto.updatedAt].
  static final updatedAt =
      obx.QueryDateProperty<MealDto>(_entities[3].properties[3]);

  /// see [MealDto.mealsFoods]
  static final mealsFoods =
      obx.QueryBacklinkToMany<MealFoodDto, MealDto>(MealFoodDto_.meal);
}

/// [TokenDto] entity fields to define ObjectBox queries.
class TokenDto_ {
  /// See [TokenDto.id].
  static final id =
      obx.QueryIntegerProperty<TokenDto>(_entities[4].properties[0]);

  /// See [TokenDto.text].
  static final text =
      obx.QueryStringProperty<TokenDto>(_entities[4].properties[1]);
}

/// [MealFoodDto] entity fields to define ObjectBox queries.
class MealFoodDto_ {
  /// See [MealFoodDto.id].
  static final id =
      obx.QueryIntegerProperty<MealFoodDto>(_entities[5].properties[0]);

  /// See [MealFoodDto.meal].
  static final meal =
      obx.QueryRelationToOne<MealFoodDto, MealDto>(_entities[5].properties[1]);

  /// See [MealFoodDto.food].
  static final food =
      obx.QueryRelationToOne<MealFoodDto, FoodDto>(_entities[5].properties[2]);

  /// See [MealFoodDto.quantity].
  static final quantity =
      obx.QueryIntegerProperty<MealFoodDto>(_entities[5].properties[3]);
}
